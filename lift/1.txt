hidr

#pragma once
//#include "Classlift.cpp"
class lift {
protected:
	int m_cap;
	long long m_time;
	int m_floor;

public:
	lift();
	//lift(const lift& rv);
	//~lift();
	//void init();
	//int copy(const lift& rv);
	//int copy(const int cap, const long long time);


	void gotofloor(int n);
	long long get_time();
};



classfit

#include <iostream>
#include "lift.h"
using namespace std;

lift::lift()
{
	m_cap = 0;// вместимость
	m_time = 0; // общее время работы
	m_floor = 1; // на каком ща этаже
}

/*
lift::lift(const lift& rv)
{
	m_cap = 0;// вместимость
	m_time = 0; // общее время работы
	m_floor = 1; // на каком ща этаже
	//copy(rv);
}

void lift::init()
{
	m_cap = 0;// вместимость
	m_time = 0; // общее время работы
	m_floor = 1; // на каком ща этаже
}
*/


void lift::gotofloor(int n) {
	m_time += (n - m_floor) * 10;
	m_floor = n;
}

long long lift::get_time() {
	return m_time;
}

lift/cpp
// lift.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include "lift.h"
//#include "Classlift.cpp"
#include <vector>
#include <queue>
using namespace std;

int main()
{
    char f = 'a';
    vector <vector <int>> all;
    all.resize(2);
    vector <int> goup;
    vector <int> godown;
    char dir; // направление
    lift x;
    while (1) {
        cin >> f;
        if (f == 'q')
            break;
        int n; // количество вызовов на этажи
        int a;
        cin >> n;
        for (int i = 0; i < n; i++) {
            cin >> dir >> a;
            if (dir == '^')
                all[0].push_back(a);
            if (dir == 'v')
                all[1].push_back(a);
        }
       /*
        for (int i = 0; i < all[0].size();i++) {
            int b;
            while (not '\0') {
                cin >> b;
                all[0].push_back(b);
            }
        }
        for (int i = 0; i < all[1].size();i++) {
            int b;
            while (not '\0') {
                cin >> b;
                all[1].push_back(b);
            }
        }
        //for (int i = 0; i < godown.size();i++)
            //x.gotofloor(godown[i]);
        for(int k = 0; k<2; k++)
            for (int i = 0; i < all[k].size();i++) {
                x.gotofloor(all[k][i]);          
        }
        */
        for (int k = 0; k < 2; k++)
            for (int i = 0; i < all[k].size();i++) {
                x.gotofloor(all[k][i]);
            }
        
    }
    cout << "Total time " << x.get_time() << endl;
}

